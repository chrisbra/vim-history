*usr_40.txt*	For Vim version 6.0g.  Last change: 2000 Aug 20

		     VIM USER MANUAL - by Bram Moolenaar
		
			      Write a Vim script


|40.1|	Introduction
|40.2|	Expressions
|40.3|	If and while
|40.4|	Using :execute
|40.5|	Functions
|40.6|	Autocommands
|40.7|	Writing a plugin

     Next chapter: |usr_41.txt|  Make new commands
 Previous chapter: |usr_31.txt|  Exploiting the GUI
Table of contents: |usr_toc.txt|

==============================================================================
*40.1*	Introduction

used for |vimrc|
variables
:let
:unlet

==============================================================================
*40.2*	Expressions

:echo "The value of 'tabstop' is " . &ts

The |:echo| is a good way to test an expression.

==============================================================================
*40.3*	If and while

:if version >= 600
:else
:endif

==============================================================================
*40.4*	Using :execute
==============================================================================
*40.5*	Functions
==============================================================================
*40.6*	Autocommands
|autocmd-<>|
==============================================================================
*40.7*	Writing a plugin				*write-plugin*

You can write a Vim script in such a way that several people can use it.  This
is called a plugin.  Other Vim users can drop your script in their plugin
directory and use its features right away |add-plugin|.

First of all you must think of a name for your plugin.  The features provided
by the plugin should be clear from its name.  And it should be unlikely that
someone else writes a plugin with the same name but does something
differently.  And try to limit the name to 8 characters, to avoid problems on
old Windows systems.  For example, a script that corrects typing mistakes
could be called "typecorr.vim".

The plugin should follow a few guidelines.  Here is an example: >

  1	" Vim plugin for correcting typing mistakes
  2	" Last change: 2000 Aug 19
  3	" Maintainer: Bram Moolenaar <Bram@vim.org>
  4
  5	if exists("loaded_typecorr")
  6	  finish
  7	endif
  8	let loaded_typecorr = 1
  9
 10	let s:save_cpo = &cpo
 11	set cpo=
 12
 13	iabbrev teh the
 14	iabbrev otehr other
 15	iabbrev wnat want
 16	iabbrev synchronisation
 17		\ synchronization
 18
 19	let &cpo = s:save_cpo

The line numbers have only been added to explain a few things, don't put them
in your plugin file!

Lines 1-3:
First of all there are a few comments about what this file is for.  The date
is needed to show which version it is.  When people using it have suggestions
for improvement, they will be able to contact the maintainer.

Lines 5-8:
Make sure the file is loaded only once.  That's not very imporant for this
simple example, but when the plugin defines functions and autocommands, you
only want that to happen once.

Lines 10,11 and 19:
The value of the 'cpoptions' option is saved and made empty.  It is restored
in line 19.  This is useful to avoid problems when users use the plugin with
different option values.  If the 'cpoptions' would have included the 'C' flag,
the line continuation in line 17 would have failed.

Note the use of "s:" for the variable name.  This is a script variable.  It
can only be used inside a script.  Outside the script it's gone.  This avoid
trouble with using the same variable name in different scripts, and makes the
variable disappear automatically when the script is finished.  Warning: You
can't use the "s:" variables in a function or autocommand!


							*write-local-help*
It's a good idea to also write some documentation for your plugin.  Especially
when its behavior can be changed by the user.  See |add-local-help| for how
they are installed.

Here is a simple example for a plugin help file, called "typecorr.txt": >

  1	*typecorr.txt*	Plugin for correcting typing mistakes
  2
  3	If you make typing mistakes, this plugin will have them corrected
  4	automatically.
  5
  6	There are currently only a few corrections.  Add your own if you like.
  7
  8							*typecorr-settings*
  9	This plugin doesn't have any settings.

The first line is actually the only one for which the format matters.  It will
be extracted from the help file to be put in the "LOCAL ADDITIONS:" section of
help.txt.  The first "*" must be in the first column of the first line.

You can add more tags inside ** in your help file.  But be careful not to use
existing help tags.  You would probably use the name of your plugin in most of
them, like "typecorr-settings" in the example.

Using references to other parts of the help in || is recommended.  This makes
it easy for the user to find associated help.

==============================================================================
 vim:tw=78:
