*usr_06.txt*	For Vim version 6.0h.  Last change: 2000 Aug 31

		     VIM USER MANUAL - by Bram Moolenaar
		
			      Set your settings


|06.1|  The vimrc file
|06.2|  The default vimrc file explained
|06.3|  Adding a plugin
|06.4|  Adding a help file
|06.5|  Often used options

     Next chapter: |usr_07.txt|  Using syntax highlighting
 Previous chapter: |usr_05.txt|  Making big changes
Table of contents: |usr_toc.txt|

==============================================================================
*06.1*  The vimrc file

You probably got tired of typing commands that you use very often.  To start
with all your favirite option settings and mappings, you write them in what is
called the vimrc file.

--todo--

If you look in the "runtime" directory of the distributed Vim files, you will
find the "vimrc_example.vim" file.  If you don't know where it is, you can
edit it with this command: >
	:e $VIMRUNTIME/vimrc_example.vim
Then use "CTRL-G" to see the full name of the file.

This file contains a number of useful items when running Vim.  You can use it
as the start for your own vimrc file.  To do this, make a copy, so that you
can modify it.  When you do this from Vim the $VIMRUNTIME will be expanded
automatically.  Example for Unix: >

	:!cp -i $VIMRUNTIME/vimrc_example.vim ~/.vimrc

Note the use of the "-i" argument, which is just to avoid overwriting an
existing .vimrc file.

--todo--

For more information on how to write a Vim script file: |usr_40.txt|.

==============================================================================
*06.2*  The default vimrc file explained

--todo--

This line: >
	filetype settings indent on

switches on three very clever mechanisms:
1. Filetype detection.
   Whenever you start editing a file, Vim will try to figure out what kind of
   file this is.  When you edit "main.c", Vim will see the ".c" extension and
   recognize this as a "c" filetype.  When you edit a file that starts with
   "#!/bin/sh", Vim will recognize it as a "sh" filetype.
   The filetype detection is used for syntax highlighting and the other two
   items below.
   See |filetypes|.

2. Using settings files
   Many different filetypes are edited with different options.  For example,
   when you edit a "c" file, it's very useful to set the 'cindent' option to
   automatically indent the lines.  These commonly useful option settings are
   placed in settings files.  You can also add your own, see
   |filetype-settings|.

3. Using indent files
   Vim can automatically figure out the indent for you.  How this needs to be
   done depends on the filetype.  Other people have done this already, and you
   can use their indenting rules.
   See |:filetype-settings-on| and 'indentexpr'.

--todo--

==============================================================================
*06.3*  Adding a plugin						*add-plugin*

Vim's functionality can be extended by adding a plugin.  A plugin is nothing
more than a Vim script file that is loaded when Vim starts up.  It usually
adds a nice feature for a limited audience (if it was for everybody it would
have been included in Vim itself).

Where can you find plugins?  Some come with Vim.  You can find them in the
directory $VIMRUNTIME/macros and its sub-directories.  Others can be
downloaded from the net, check out http://www.vim.org.  They are sometimes
posted in a Vim |maillist|.  Or you could write one yourself, see
|write-plugin|.

How to start using a plugin?  First read the text in the plugin itself to
check for any special conditions.  Then copy the file to your plugin
directory:

	system		plugin directory
	Unix		~/.vim/plugin/
	PC and OS/2	$HOME/vimfiles/plugin or $VIM/vimfiles/plugin
	Amiga		s:vimfiles/plugin
	Macintosh	$VIM:vimfiles:plugin
	RISC-OS		Choices:vimfiles.plugin

Example for Unix (assuming you didn't have a plugin directory yet): >

	mkdir ~/.vim
	mkdir ~/.vim/plugin
	cp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin

That's all!  Now you can use the commands defined in this plugin to justify
text.

Actually, the "plugin" directory can be in any of the directories in the
'runtimepath' option.  All of these directories will be searched for plugins
and they are all loaded.  For example, if this command: >

	set runtimepath

produces this output: >

	runtimepath=/etc/vim,~/.vim,/usr/local/share/vim/vim60

then Vim will load all plugins in these directories: >

	/etc/vim/plugin/
	~/.vim/plugin/
	/usr/local/share/vim/vim60/plugin/

Note that the last one is the value of $VIMRUNTIME which has been expanded.

What if it looks like your plugin is not being loaded?  You can find out what
happens when Vim starts up by using the |-V| argument: >
	vim -V1
You will see a lot of messages, in between them is a remark about loading the
plugins.  It starts with: >
	Searching for "plugin/*.vim" in
There you can see where Vim looks for your plugin scripts.

Further reading:
	|load-plugins|	When the plugins are loaded during startup.
	|write-plugin|	How to write a plugin script.

==============================================================================
*06.4*  Adding a help file			*add-local-help*

If you are lucky, the plugin you installed also comes with a help file.

To add a help file locally (examples are for Unix): >
1. Create a "doc" directory in one of the directories in 'runtimepath'. >

	mkdir ~/.vim/doc

2. Move your help file to the "doc" directory. >

	mv ~/in/myhelp.txt ~/.vim/doc/myhelp.txt

3. Now comes the trick, which allows you to jump to the subjects in the new
   help file: Generate the local tags file with the |:helptags| command. >

	vim
	:helptags ~/.vim/doc

Now you can use the >

	:help myhelp

command to find "myhelp" in the help file you just added.  You can see an
entry for the local help file when you do >

	:help

and go down to the "LOCAL ADDITIONS" section.  The title lines from the local
help files are automagically added to this section.  There you can see which
local help files have been added and jump to them through the tag.

For writing a local help file, see |write-local-help|.

==============================================================================
*06.5*  Often used options

==============================================================================
 vim:tw=78:
